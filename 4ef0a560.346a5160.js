(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),o=n(7),r=(n(0),n(89)),l={id:"scrollables",title:"Scrollables",slug:"/scrollables",hide_table_of_contents:!0},i={unversionedId:"scrollables",id:"scrollables",isDocsHomePage:!1,title:"Scrollables",description:"This library provides a pre-integrated virtualized lists that utilize an internal functionalities with the bottom sheet container to allow smooth panning interactions. These lists I called them Scrollables and they are:",source:"@site/docs/scrollables.md",slug:"/scrollables",permalink:"/react-native-bottom-sheet/scrollables",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/scrollables.md",version:"current",sidebar:"packages",previous:{title:"Hooks",permalink:"/react-native-bottom-sheet/hooks"},next:{title:"React Navigation Integration",permalink:"/react-native-bottom-sheet/react-navigation-integration"}},s=[{value:"BottomSheetFlatList",id:"bottomsheetflatlist",children:[{value:"Props",id:"props",children:[]},{value:"Example",id:"example",children:[]}]},{value:"BottomSheetSectionList",id:"bottomsheetsectionlist",children:[{value:"Props",id:"props-1",children:[]},{value:"Example",id:"example-1",children:[]}]},{value:"BottomSheetScrollView",id:"bottomsheetscrollview",children:[{value:"Props",id:"props-2",children:[]},{value:"Example",id:"example-2",children:[]}]},{value:"BottomSheetView",id:"bottomsheetview",children:[{value:"Props",id:"props-3",children:[]},{value:"Example",id:"example-3",children:[]}]}],c={rightToc:s};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This library provides a pre-integrated virtualized lists that utilize an internal functionalities with the bottom sheet container to allow smooth panning interactions. These lists I called them Scrollables and they are:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#bottomsheetflatlist"}),"BottomSheetFlatList")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#bottomsheetsectionlist"}),"BottomSheetSectionList")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#bottomsheetscrollview"}),"BottomSheetScrollView")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#bottomsheetview"}),"BottomSheetView"))),Object(r.b)("h2",{id:"bottomsheetflatlist"},"BottomSheetFlatList"),Object(r.b)("p",null,"An extended component of ",Object(r.b)("inlineCode",{parentName:"p"},"FlatList")," from ",Object(r.b)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),Object(r.b)("h3",{id:"props"},"Props"),Object(r.b)("h4",{id:"focushook"},Object(r.b)("inlineCode",{parentName:"h4"},"focusHook")),Object(r.b)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",Object(r.b)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",Object(r.b)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"default"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"function"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"React.useEffect")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"NO")))),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetFlatList } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetFlatList\n          data={data}\n          keyExtractor={i => i}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")),Object(r.b)("h2",{id:"bottomsheetsectionlist"},"BottomSheetSectionList"),Object(r.b)("p",null,"Is an extended component of ",Object(r.b)("inlineCode",{parentName:"p"},"SectionList")," from ",Object(r.b)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),Object(r.b)("h3",{id:"props-1"},"Props"),Object(r.b)("h4",{id:"focushook-1"},Object(r.b)("inlineCode",{parentName:"h4"},"focusHook")),Object(r.b)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",Object(r.b)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",Object(r.b)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"default"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"function"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"React.useEffect")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"NO")))),Object(r.b)("h3",{id:"example-1"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetSectionList } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const sections = useMemo(\n    () =>\n      Array(10)\n        .fill(0)\n        .map((_, index) => ({\n          title: `Section ${index}`,\n          data: Array(10)\n            .fill(0)\n            .map((_, index) => `Item ${index}`),\n        })),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderSectionHeader = useCallback(\n    ({ section }) => (\n      <View style={styles.sectionHeaderContainer}>\n        <Text>{section.title}</Text>\n      </View>\n    ),\n    []\n  );\n  const renderItem = useCallback(\n    ({ item }) => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetSectionList\n          sections={sections}\n          keyExtractor={i => i}\n          renderSectionHeader={renderSectionHeader}\n          renderItem={renderItem}\n          contentContainerStyle={styles.contentContainer}\n        />\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  sectionHeaderContainer: {\n    backgroundColor: 'white',\n    padding: 6,\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")),Object(r.b)("h2",{id:"bottomsheetscrollview"},"BottomSheetScrollView"),Object(r.b)("p",null,"Is an extended component of ",Object(r.b)("inlineCode",{parentName:"p"},"ScrollView")," from ",Object(r.b)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),Object(r.b)("h3",{id:"props-2"},"Props"),Object(r.b)("h4",{id:"focushook-2"},Object(r.b)("inlineCode",{parentName:"h4"},"focusHook")),Object(r.b)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",Object(r.b)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",Object(r.b)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"default"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"function"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"React.useEffect")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"NO")))),Object(r.b)("h3",{id:"example-2"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetScrollView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    item => (\n      <View key={item} style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetScrollView\n          contentContainerStyle={styles.contentContainer}\n        >\n          {data.map(renderItem)}\n        </BottomSheetScrollView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")),Object(r.b)("h2",{id:"bottomsheetview"},"BottomSheetView"),Object(r.b)("p",null,"Is an extended component of ",Object(r.b)("inlineCode",{parentName:"p"},"View")," from ",Object(r.b)("inlineCode",{parentName:"p"},"react-native"),", with bottom sheet integrations."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"This only needed when the bottom sheet used with ",Object(r.b)("inlineCode",{parentName:"p"},"React Navigation"),".")),Object(r.b)("h3",{id:"props-3"},"Props"),Object(r.b)("h4",{id:"focushook-3"},Object(r.b)("inlineCode",{parentName:"h4"},"focusHook")),Object(r.b)("p",null,"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide ",Object(r.b)("inlineCode",{parentName:"p"},"useFocusEffect")," from ",Object(r.b)("inlineCode",{parentName:"p"},"@react-navigation/native"),"."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"default"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"required"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"function"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"React.useEffect")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"NO")))),Object(r.b)("h3",{id:"example-3"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React, { useCallback, useRef, useMemo } from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport BottomSheet, { BottomSheetView } from '@gorhom/bottom-sheet';\n\nconst App = () => {\n  // hooks\n  const sheetRef = useRef<BottomSheet>(null);\n\n  // variables\n  const data = useMemo(\n    () =>\n      Array(50)\n        .fill(0)\n        .map((_, index) => `index-${index}`),\n    []\n  );\n  const snapPoints = useMemo(() => ['25%', '50%', '90%'], []);\n\n  // callbacks\n  const handleSheetChange = useCallback(index => {\n    console.log('handleSheetChange', index);\n  }, []);\n  const handleSnapPress = useCallback(index => {\n    sheetRef.current?.snapTo(index);\n  }, []);\n  const handleClosePress = useCallback(() => {\n    sheetRef.current?.close();\n  }, []);\n\n  // render\n  const renderItem = useCallback(\n    item => (\n      <View style={styles.itemContainer}>\n        <Text>{item}</Text>\n      </View>\n    ),\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} />\n      <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} />\n      <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} />\n      <Button title=\"Close\" onPress={() => handleClosePress()} />\n      <BottomSheet\n        ref={sheetRef}\n        index={1}\n        snapPoints={snapPoints}\n        onChange={handleSheetChange}\n      >\n        <BottomSheetView style={styles.contentContainer}>\n          {data.map(renderItem)}\n        </BottomSheetView>\n      </BottomSheet>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 200,\n  },\n  contentContainer: {\n    backgroundColor: 'white',\n  },\n  itemContainer: {\n    padding: 6,\n    margin: 6,\n    backgroundColor: '#eee',\n  },\n});\n\nexport default App;\n")))}b.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?o.a.createElement(h,i(i({ref:t},c),{},{components:n})):o.a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);