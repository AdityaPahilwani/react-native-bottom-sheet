[{"title":"BottomSheet v4 is here!","type":0,"sectionRef":"#","url":"blog/bottom-sheet-v4","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Features","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#features","content":"In this release, I have rewritten the implementation to 100% utilize Reanimated v2 hooks and variables instead of using the JS once. This allows for more customization and provides more stability overall. "},{"title":"Keyboard Handling","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#keyboard-handling","content":" Keyboard handling was released with v3, however, there were some issues that pushed this release. Now the keyboard handling is enabled by default and provides more options to customize the behavior, a new prop android_keyboardInputMode is introduced to handle the Android keyboard appearance config windowSoftInputMode. Read more about Keyboard Handling. "},{"title":"Pull to Refresh","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#pull-to-refresh","content":" One of the earliest feature request that was submitted to repo Pull to refresh by gudberg. There was an attempt to implement it on v3 & v2 but I was hit with their limitations, until now. This feature is enabled by default, users need to provide refreshing & onRefresh to any of the Scrollables and voila! Read more about Pull to Refresh. "},{"title":"Detach Sheet / Modal","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#detach-sheet--modal","content":" Another powerful addition to BottomSheet & BottomSheetModal is the ability to detach the sheet from the bottom - so no more bottom sheet üòÖ -, which allows users to come up with lots of creative choices and customization to the sheet position. Read more about Detach Sheet / Modal. "},{"title":"Footer Component","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#footer-component","content":" Lastly, I have added a new prop footerComponent to BottomSheet & BottomSheetModal to allow users to stick their custom component to the bottom of the sheet even when the keyboard is shown. Read more about Footer Component. "},{"title":"Breaking changes","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#breaking-changes","content":"Removed# Removed animationEasing from BottomSheet props.Removed animationDuration from BottomSheet props.Removed closeOnPress from BottomSheetBackdrop props.Removed dismissOnClose from BottomSheetModal props.Removed enableFlashScrollableIndicatorOnExpand from BottomSheet props. Changes# snapPoints prop is no longer accepting 0 as a value.animateOnMount props default value is true "},{"title":"Changelog","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#changelog","content":"Here are the highlight change log of v4 Refactored# create one generic scrollable component (#442).converted all internal state/memoized variables to reanimated shared values. (#430).updated handling animated heights (#451). Added# added pull to refresh implementation (016a01f).added enable pan down to close (#437).added snap to position (#443).added footer component (#457).added pre-integrated VirtualizedList component (2d4d69d).added keyboard input mode for android (069c4b6).added detached bottom sheet (#487).added onClose callback to BottomSheet (ee64545).added backgroundStyle, handleStyle & handleIndicatorStyle to bottom sheet (2211765).added forceClose to BottomSheet methods (3dd5796). Fixed# fixed sheet positioning on modals (ee573e9).fixed prevent animatedPosition from becoming undefined (400d7b9).fixed on mount flicker on fixed sheet (48c4988).fixed updated keyboard height in container calculation (2599f6c).fixed re-snap to current position when snap points get updated (bb8e202).fixed handle initial closed sheet (4bc40d9). Read the full change log. "},{"title":"Special thanks","type":1,"pageTitle":"BottomSheet v4 is here!","url":"blog/bottom-sheet-v4#special-thanks","content":"Thanks to all users for testing and reporting issues. Without your help, this library wouldn't progress this much ‚ù§Ô∏è Special thanks to @kickbk, @vonovak, @likern, @nandorojo, @axeldelafosse & @skdev24 for testing & contributing to this release. Finally, thanks to Software Mansion for powering this library with Reanimated & Gesture Handler. "},{"title":"Adding Shadow","type":0,"sectionRef":"#","url":"v2/adding-shadow","content":"Adding Shadow To add shadow to the bottom sheet, you will need to pass the style prop with shadow styling config, I recommend checking out React Native Shadow Generator by @ethercreative. NOTICE You may notice that shadow looks different between iOS and Android, that's because each platform handle drawing shadows differently, read more about Android Shadows.","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"React Native Bottom Sheet","type":0,"sectionRef":"#","url":"v2/","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Features","type":1,"pageTitle":"React Native Bottom Sheet","url":"v2/#features","content":"Modal presentation view, Bottom Sheet Modal.Smooth gesture interactions & snapping animations.Support FlatList, SectionList, ScrollView & View scrolling interactions, read more.Support React Navigation Integration, read more.Compatible with Reanimated v1 & v2.Compatible with Expo.Accessibility support.Written in TypeScript. "},{"title":"Installation","type":1,"pageTitle":"React Native Bottom Sheet","url":"v2/#installation","content":"This version is written with Reanimated v1 & compatible with Reanimated v2: yarn add @gorhom/bottom-sheet@^2 Copy Dependencies# This library needs these dependencies to be installed in your project before you can use it: yarn add react-native-reanimated@^1 react-native-gesture-handler Copy info React Native Gesture Handler needs extra steps to finalize its installation, please follow their installation instructions. React Native Reanimated v1 needs extra steps to finalize its installation, please follow their installation instructions. "},{"title":"Built With ‚ù§Ô∏è","type":1,"pageTitle":"React Native Bottom Sheet","url":"v2/#built-with-Ô∏è","content":"react-native-reanimatedreact-native-gesture-handlerreact-native-redashreact-native-builder-bob "},{"title":"Liked the library? üòá","type":1,"pageTitle":"React Native Bottom Sheet","url":"v2/#liked-the-library-","content":" "},{"title":"Custom Backdrop","type":0,"sectionRef":"#","url":"v2/custom-backdrop","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Backdrop","url":"v2/custom-backdrop#example","content":" Here is an example of a custom backdrop component: import React, { useMemo } from 'react';import { BottomSheetBackdropProps } from '@gorhom/bottom-sheet';import Animated, { Extrapolate, interpolate } from 'react-native-reanimated'; const CustomBackdrop = ({ animatedIndex, style }: BottomSheetBackdropProps) => { // animated variables const animatedOpacity = useMemo( () => interpolate(animatedIndex, { inputRange: [0, 1], outputRange: [0, 1], extrapolate: Extrapolate.CLAMP, }), [animatedIndex] ); // styles const containerStyle = useMemo( () => [ style, { backgroundColor: '#a8b5eb', opacity: animatedOpacity, }, ], [style, animatedOpacity] ); return <Animated.View style={containerStyle} />;}; export default CustomBackdrop; Copy "},{"title":"Custom Background","type":0,"sectionRef":"#","url":"v2/custom-background","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Background","url":"v2/custom-background#example","content":" Here is an example of a custom background component: import React, { useMemo } from 'react';import { BottomSheetBackgroundProps } from '@gorhom/bottom-sheet';import Animated, { Extrapolate, interpolate, interpolateColors,} from 'react-native-reanimated'; const CustomBackground = ({ animatedIndex, style,}: BottomSheetBackgroundProps) => { // animated variables const animatedBackground = useMemo( () => interpolateColors(animatedIndex, { inputRange: [0, 1], outputColorRange: ['#fff', '#a8b5eb'], }), [animatedIndex] ); // styles const containerStyle = useMemo( () => [ style, { backgroundColor: animatedBackground, }, ], [style, animatedBackground] ); return <Animated.View style={containerStyle} />;}; export default CustomBackground; Copy "},{"title":"FAQ","type":0,"sectionRef":"#","url":"v2/faq","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"How this library differ from reanimated-bottom-sheet or react-native-scroll-bottom-sheet?","type":1,"pageTitle":"FAQ","url":"v2/faq#how-this-library-differ-from-reanimated-bottom-sheet-or-react-native-scroll-bottom-sheet","content":"This library was built to provide the most native-like experience and could fit any use-case that developers wants it to be. While both libraries providing similar experience, but they still missing the following: reanimated-bottom-sheet: Seamless gesture interaction between the sheet and the content.react-native-scroll-bottom-sheet: Extracting scrollable content to allow developers customize the sheet content, like integrate React Navigation as the sheet content. Both libraries are great! and I have used both of them at my work ‚ù§Ô∏è "},{"title":"Hooks","type":0,"sectionRef":"#","url":"v2/hooks","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"useBottomSheet","type":1,"pageTitle":"Hooks","url":"v2/hooks#usebottomsheet","content":"This hook provides all the bottom sheet public methods, to the internal sheet content or handle. This hook works at any component inside the BottomSheet. import React from 'react';import { View, Button } from 'react-native';import { useBottomSheet } from '@gorhom/bottom-sheet'; const SheetContent = () => { const { expand } = useBottomSheet(); return ( <View> <Button onPress={expand}> </View> )} Copy "},{"title":"Methods","type":0,"sectionRef":"#","url":"v2/methods","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"snapTo","type":1,"pageTitle":"Methods","url":"v2/methods#snapto","content":"Animate the sheet to one of the provided point from snapPoints. type snapTo = (index: number) => void; Copy "},{"title":"expand","type":1,"pageTitle":"Methods","url":"v2/methods#expand","content":"Animate the sheet to the highest provided point from snapPoints. type expand = () => void; Copy "},{"title":"collapse","type":1,"pageTitle":"Methods","url":"v2/methods#collapse","content":"Animate the sheet to the lowest provided point from snapPoints. type collapse = () => void; Copy "},{"title":"close","type":1,"pageTitle":"Methods","url":"v2/methods#close","content":"Close the sheet. type close = () => void; Copy "},{"title":"Custom Handle","type":0,"sectionRef":"#","url":"v2/custom-handle","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Handle","url":"v2/custom-handle#example","content":" Here is an example of a custom handle component, but first you will need to install Redash: Redash: The React Native Reanimated and Gesture Handler Toolbelt. yarn add react-native-redash Copy import React, { useMemo } from 'react';import { StyleProp, StyleSheet, ViewStyle } from 'react-native';import { BottomSheetHandleProps } from '@gorhom/bottom-sheet';import Animated, { interpolate, Extrapolate } from 'react-native-reanimated';import { transformOrigin, toRad } from 'react-native-redash'; interface HandleProps extends BottomSheetHandleProps {} const Handle: React.FC<HandleProps> = ({ animatedIndex }) => { //#region animations const borderTopRadius = useMemo( () => interpolate(animatedIndex, { inputRange: [1, 2], outputRange: [20, 0], extrapolate: Extrapolate.CLAMP, }), [animatedIndex] ); const indicatorTransformOriginY = useMemo( () => interpolate(animatedIndex, { inputRange: [0, 1, 2], outputRange: [-1, 0, 1], extrapolate: Extrapolate.CLAMP, }), [animatedIndex] ); const leftIndicatorRotate = useMemo( () => interpolate(animatedIndex, { inputRange: [0, 1, 2], outputRange: [toRad(-30), 0, toRad(30)], extrapolate: Extrapolate.CLAMP, }), [animatedIndex] ); const rightIndicatorRotate = interpolate(animatedIndex, { inputRange: [0, 1, 2], outputRange: [toRad(30), 0, toRad(-30)], extrapolate: Extrapolate.CLAMP, }); //#endregion //#region styles const containerStyle = useMemo( () => [ styles.header, { borderTopLeftRadius: borderTopRadius, borderTopRightRadius: borderTopRadius, }, ], [borderTopRadius] ); const leftIndicatorStyle = useMemo( () => ({ ...styles.indicator, ...styles.leftIndicator, transform: transformOrigin( { x: 0, y: indicatorTransformOriginY }, { rotate: leftIndicatorRotate, translateX: -5, } ), }), [indicatorTransformOriginY, leftIndicatorRotate] ); const rightIndicatorStyle = useMemo( () => ({ ...styles.indicator, ...styles.rightIndicator, transform: transformOrigin( { x: 0, y: indicatorTransformOriginY }, { rotate: rightIndicatorRotate, translateX: 5, } ), }), [indicatorTransformOriginY, rightIndicatorRotate] ); //#endregion // render return ( <Animated.View style={containerStyle}> <Animated.View style={leftIndicatorStyle} /> <Animated.View style={rightIndicatorStyle} /> </Animated.View> );}; export default Handle; const styles = StyleSheet.create({ header: { alignContent: 'center', alignItems: 'center', justifyContent: 'center', backgroundColor: 'white', paddingVertical: 14, shadowColor: 'black', shadowOffset: { width: 0, height: -20, }, shadowOpacity: 0.1, shadowRadius: 10, elevation: 16, borderBottomWidth: 1, borderBottomColor: '#fff', }, indicator: { position: 'absolute', width: 10, height: 4, backgroundColor: '#999', }, leftIndicator: { borderTopStartRadius: 2, borderBottomStartRadius: 2, }, rightIndicator: { borderTopEndRadius: 2, borderBottomEndRadius: 2, },}); Copy "},{"title":"React Native Bottom Sheet Modal","type":0,"sectionRef":"#","url":"v2/modal","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Features","type":1,"pageTitle":"React Native Bottom Sheet Modal","url":"v2/modal#features","content":"...Bottom Sheet FeaturesSmooth interaction and mounting animation.Support stack sheet modals. "},{"title":"Installation","type":1,"pageTitle":"React Native Bottom Sheet Modal","url":"v2/modal#installation","content":"This feature is already shipped with @gorhom/bottom-sheet package and it requires no extra dependency. "},{"title":"Hooks","type":0,"sectionRef":"#","url":"v2/modal/hooks","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"useBottomSheetModal","type":1,"pageTitle":"Hooks","url":"v2/modal/hooks#usebottomsheetmodal","content":"This hook provides modal functionalities only, for sheet functionalities please look at Bottom Sheet Hooks. This hook works at any component in BottomSheetModalProvider. import React from 'react';import { View, Button } from 'react-native';import { useBottomSheetModal } from '@gorhom/bottom-sheet'; const SheetContent = () => { const { dismiss, dismissAll } = useBottomSheetModal(); return ( <View> <Button onPress={dismiss}> </View> )} Copy "},{"title":"dismiss","type":1,"pageTitle":"Hooks","url":"v2/modal/hooks#dismiss","content":"type dismiss = (key: string) => void; Copy Dismiss a modal by its name/key. "},{"title":"dismissAll","type":1,"pageTitle":"Hooks","url":"v2/modal/hooks#dismissall","content":"type dismissAll = () => void; Copy Dismiss all mounted/presented modals. "},{"title":"Methods","type":0,"sectionRef":"#","url":"v2/modal/methods","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"present","type":1,"pageTitle":"Methods","url":"v2/modal/methods#present","content":"type present = () => void; Copy Mount and present the modal. "},{"title":"dismiss","type":1,"pageTitle":"Methods","url":"v2/modal/methods#dismiss","content":"type dismiss = () => void; Copy Close and unmount the modal. "},{"title":"Props","type":0,"sectionRef":"#","url":"v2/modal/props","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Configuration","type":1,"pageTitle":"Props","url":"v2/modal/props#configuration","content":""},{"title":"name","type":1,"pageTitle":"Props","url":"v2/modal/props#name","content":"Modal name to help identify the modal for later on. type\tdefault\trequiredstring\tgenerated unique key\tNO "},{"title":"dismissOnPanDown","type":1,"pageTitle":"Props","url":"v2/modal/props#dismissonpandown","content":"Dismiss modal when panning down. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"Callbacks","type":1,"pageTitle":"Props","url":"v2/modal/props#callbacks","content":""},{"title":"onDismiss","type":1,"pageTitle":"Props","url":"v2/modal/props#ondismiss","content":"Callback when the modal dismissed. type onDismiss = () => void; Copy type\tdefault\trequiredfunction\tnull\tNO "},{"title":"Props","type":0,"sectionRef":"#","url":"v2/props","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Configuration","type":1,"pageTitle":"Props","url":"v2/props#configuration","content":""},{"title":"index","type":1,"pageTitle":"Props","url":"v2/props#index","content":"Initial snap index. You also could provide -1 to initiate bottom sheet in closed state. type\tdefault\trequirednumber\t0\tNO "},{"title":"snapPoints","type":1,"pageTitle":"Props","url":"v2/props#snappoints","content":"Points for the bottom sheet to snap to, points should be sorted from bottom to top. It accepts array of number, string or mix. type\trequiredArray<number|string>\tYES caution String values should be a percentage. examples# snapPoints={[200, 500]}snapPoints={[200, '50%']}snapPoints={[-1, '100%']} Copy "},{"title":"enableContentPanningGesture","type":1,"pageTitle":"Props","url":"v2/props#enablecontentpanninggesture","content":"Enable content panning gesture interaction. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"enableHandlePanningGesture","type":1,"pageTitle":"Props","url":"v2/props#enablehandlepanninggesture","content":"Enable handle panning gesture interaction. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"animateOnMount","type":1,"pageTitle":"Props","url":"v2/props#animateonmount","content":"This will initially mount the sheet closed and when it's mounted and calculated the layout, it will snap to initial snap point index. type\tdefault\trequiredboolean\tfalse\tNO "},{"title":"style","type":1,"pageTitle":"Props","url":"v2/props#style","content":"View style to be applied at the sheet container, it also could be an AnimatedStyle. This is helpful to add shadow to the sheet. type\tdefault\trequiredViewStyle | AnimatedStyle\tundefined\tNO "},{"title":"Layout Configuration","type":1,"pageTitle":"Props","url":"v2/props#layout-configuration","content":""},{"title":"handleHeight","type":1,"pageTitle":"Props","url":"v2/props#handleheight","content":"Handle height helps to calculate the internal container and sheet layouts. If handleComponent is provided, the library internally will calculate its layout, unless handleHeight is provided too. type\tdefault\trequirednumber\t24\tNO "},{"title":"containerHeight","type":1,"pageTitle":"Props","url":"v2/props#containerheight","content":"Container height helps to calculate the internal sheet layouts. If containerHeight not provided, the library internally will calculate it, however this will cause an extra re-rendering. type\tdefault\trequirednumber\t0\tNO "},{"title":"topInset","type":1,"pageTitle":"Props","url":"v2/props#topinset","content":"Top inset to be added to the bottom sheet container, usually it comes from @react-navigation/stack hook useHeaderHeight or from react-native-safe-area-context hook useSafeArea. type\tdefault\trequirednumber\t0\tNO "},{"title":"bottomInset","type":1,"pageTitle":"Props","url":"v2/props#bottominset","content":"Bottom inset to be added to the bottom sheet container. type\tdefault\trequirednumber\t0\tNO "},{"title":"Animation Configuration","type":1,"pageTitle":"Props","url":"v2/props#animation-configuration","content":""},{"title":"animationDuration","type":1,"pageTitle":"Props","url":"v2/props#animationduration","content":"Snapping animation duration. type\tdefault\trequirednumber\t500\tNO "},{"title":"animationEasing","type":1,"pageTitle":"Props","url":"v2/props#animationeasing","content":"Snapping animation easing function. type\tdefault\trequiredEasingFunction\t@TODO\tNO "},{"title":"Animated Nodes","type":1,"pageTitle":"Props","url":"v2/props#animated-nodes","content":""},{"title":"animatedIndex","type":1,"pageTitle":"Props","url":"v2/props#animatedindex","content":"Animated value to be used as a callback for the index node internally. type\tdefault\trequiredAnimatedValue<number>\tnull\tNO "},{"title":"animatedPosition","type":1,"pageTitle":"Props","url":"v2/props#animatedposition","content":"Animated value to be used as a callback for the position node internally. type\tdefault\trequiredAnimatedValue<number>\tnull\tNO "},{"title":"Callbacks","type":1,"pageTitle":"Props","url":"v2/props#callbacks","content":""},{"title":"onChange","type":1,"pageTitle":"Props","url":"v2/props#onchange","content":"Callback when the sheet position changed. type onChange = (index: number) => void; Copy type\tdefault\trequiredfunction\tnull\tNO "},{"title":"onAnimate","type":1,"pageTitle":"Props","url":"v2/props#onanimate","content":"Callback when the sheet about to animate to a new position. type onAnimate = (fromIndex: number, toIndex: number) => void; Copy type\tdefault\trequiredfunction\tnull\tNO "},{"title":"Components","type":1,"pageTitle":"Props","url":"v2/props#components","content":""},{"title":"handleComponent","type":1,"pageTitle":"Props","url":"v2/props#handlecomponent","content":"Component to be placed as a sheet handle. type\tdefault\trequiredReact.FC<BottomSheetHandleProps>\tBottomSheetHandle\tNO "},{"title":"backdropComponent","type":1,"pageTitle":"Props","url":"v2/props#backdropcomponent","content":"Component to be placed as a sheet backdrop, by default is set to null, however the library also provide a default implementation BottomSheetBackdrop of a backdrop but you will need to provide it manually. type\tdefault\trequiredReact.FC<BottomSheetBackgroundProps>\tnull\tNO "},{"title":"backgroundComponent","type":1,"pageTitle":"Props","url":"v2/props#backgroundcomponent","content":"Component to be placed as a sheet background. type\tdefault\trequiredReact.FC<BottomSheetBackgroundProps>\tBottomSheetBackground\tNO "},{"title":"children","type":1,"pageTitle":"Props","url":"v2/props#children","content":"Scrollable node or react node to be places as a sheet content. type\tdefault\trequired() => React.ReactNode | React.ReactNode[] | React.ReactNode\tnull\tYES "},{"title":"Usage","type":0,"sectionRef":"#","url":"v2/modal/usage","content":"Usage Here is a simple usage of the Bottom Sheet Modal, with non-scrollable content. For more scrollable usage please read Scrollables. import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet, Button } from 'react-native';import { BottomSheetModal, BottomSheetModalProvider,} from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetModalRef = useRef<BottomSheetModal>(null); // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // callbacks const handlePresentModalPress = useCallback(() => { bottomSheetModalRef.current?.present(); }, []); const handleSheetChanges = useCallback((index: number) => { console.log('handleSheetChanges', index); }, []); // renders return ( <BottomSheetModalProvider> <View style={styles.container}> <Button onPress={handlePresentModalPress} title=\"Present Modal\" color=\"black\" /> <BottomSheetModal ref={bottomSheetModalRef} index={1} snapPoints={snapPoints} onChange={handleSheetChanges} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheetModal> </View> </BottomSheetModalProvider> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, justifyContent: 'center', backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', },}); export default App; Copy","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"React Navigation Integration","type":0,"sectionRef":"#","url":"v2/react-navigation-integration","content":"React Navigation Integration One of the main goal of this library, is to allow user to fully integrate a stack navigator in the bottom sheet. This integration allow lots of opportunities for a native-like experience in your app üòá However, there are some tricks has to be follow to enable both libraries to work together seamlessly. You need to override safeAreaInsets, by default React Navigation add the safe area insets to all its navigators, but since your navigator will properly won't cover full screen, you will need to override it and set it to 0. For more details regarding the implementation, please have a look at the Navigator Example.","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"v2/troubleshooting","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Pressables / Touchables are not working on Android","type":1,"pageTitle":"Troubleshooting","url":"v2/troubleshooting#pressables--touchables-are-not-working-on-android","content":"Due to wrapping the content and handle with TapGestureHandler & PanGestureHandler, any gesture interaction would not function as expected. To resolve this issue, please use touchables that this library provide. import { TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback,} from '@gorhom/bottom-sheet'; Copy "},{"title":"Adding horizontal FlatList or ScrollView is not working properly on Android","type":1,"pageTitle":"Troubleshooting","url":"v2/troubleshooting#adding-horizontal-flatlist-or-scrollview-is-not-working-properly-on-android","content":"Due to wrapping the content and handle with TapGestureHandler & PanGestureHandler, any gesture interaction would not function as expected. To resolve this issue, please use ScrollView & FlatList from react-native-gesture-handler provide instead react-native. import { ScrollView, FlatList} from 'react-native-gesture-handler'; Copy "},{"title":"My component gesture interaction gets conflicted with Bottom Sheet interactions ?","type":1,"pageTitle":"Troubleshooting","url":"v2/troubleshooting#my-component-gesture-interaction-gets-conflicted-with-bottom-sheet-interactions-","content":"To avoid the gesture interaction conflict between the Bottom Sheet and its content, you will need to wrap your component with NativeViewGestureHandler from react-native-gesture-handler import { NativeViewGestureHandler } from 'react-native-gesture-handler'; <NativeViewGestureHandler disallowInterruption={true}> <AwesomeComponent /></NativeViewGestureHandler> Copy "},{"title":"Usage","type":0,"sectionRef":"#","url":"v2/usage","content":"Usage Here is a simple usage of the Bottom Sheet, with non-scrollable content. For more scrollable usage please read Scrollables. import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet } from 'react-native';import BottomSheet from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // callbacks const handleSheetChanges = useCallback((index: number) => { console.log('handleSheetChanges', index); }, []); // renders return ( <View style={styles.container}> <BottomSheet ref={bottomSheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChanges} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', },}); export default App; Copy","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Adding Shadow","type":0,"sectionRef":"#","url":"adding-shadow","content":"Adding Shadow To add shadow to the bottom sheet, you will need to pass the style prop with shadow styling config, I recommend checking out React Native Shadow Generator by @ethercreative. NOTICE You may notice that shadow looks different between iOS and Android, that's because each platform handle drawing shadows differently, read more about Android Shadows.","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"BottomSheetBackdrop","type":0,"sectionRef":"#","url":"components/bottomsheetbackdrop","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#props","content":"Inherits ViewProps from react-native. "},{"title":"animatedIndex","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#animatedindex","content":"Current sheet position index. type\tdefault\trequiredAnimated.SharedValue<number>\t0\tYES "},{"title":"animatedPosition","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#animatedposition","content":"Current sheet position. type\tdefault\trequiredAnimated.SharedValue<number>\t0\tYES "},{"title":"opacity","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#opacity","content":"Backdrop opacity. type\tdefault\trequirednumber\t0.5\tNO "},{"title":"appearsOnIndex","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#appearsonindex","content":"Snap point index when backdrop will appears on. type\tdefault\trequirednumber\t1\tNO "},{"title":"disappearsOnIndex","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#disappearsonindex","content":"Snap point index when backdrop will disappears on. type\tdefault\trequirednumber\t0\tNO "},{"title":"enableTouchThrough","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#enabletouchthrough","content":"Enable touch through backdrop component. type\tdefault\trequiredboolean\tfalse\tNO "},{"title":"pressBehavior","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#pressbehavior","content":"What should happen when user press backdrop? none: do nothing.close: close the sheet.collapse: collapse the sheet.N: snap point index. type\tdefault\trequiredBackdropPressBehavior | number\t'close'\tNO "},{"title":"Example","type":1,"pageTitle":"BottomSheetBackdrop","url":"components/bottomsheetbackdrop#example","content":"import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet } from 'react-native';import BottomSheet, { BottomSheetBackdrop } from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => ['25%', '50%', '75%'], []); // callbacks const handleSheetChanges = useCallback((index: number) => { console.log('handleSheetChanges', index); }, []); // renders const renderBackdrop = useCallback( props => ( <BottomSheetBackdrop {...props} disappearsOnIndex={1} appearsOnIndex={2} /> ), [] ); return ( <View style={styles.container}> <BottomSheet ref={bottomSheetRef} index={1} snapPoints={snapPoints} backdropComponent={renderBackdrop} onChange={handleSheetChanges} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', },}); export default App; Copy "},{"title":"BottomSheetFlatList","type":0,"sectionRef":"#","url":"components/bottomsheetflatlist","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetFlatList","url":"components/bottomsheetflatlist#props","content":"Inherits FlatListProps from react-native. "},{"title":"focusHook","type":1,"pageTitle":"BottomSheetFlatList","url":"components/bottomsheetflatlist#focushook","content":"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO "},{"title":"Ignored Props","type":1,"pageTitle":"BottomSheetFlatList","url":"components/bottomsheetflatlist#ignored-props","content":"These props will be ignored if they were passed, because of the internal integration that uses them. scrollEventThrottledecelerationRateonScrollBeginDrag "},{"title":"Example","type":1,"pageTitle":"BottomSheetFlatList","url":"components/bottomsheetflatlist#example","content":"import React, { useCallback, useRef, useMemo } from \"react\";import { StyleSheet, View, Text, Button } from \"react-native\";import BottomSheet, { BottomSheetFlatList } from \"@gorhom/bottom-sheet\"; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []); // callbacks const handleSheetChange = useCallback((index) => { console.log(\"handleSheetChange\", index); }, []); const handleSnapPress = useCallback((index) => { sheetRef.current?.snapToIndex(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderItem = useCallback( ({ item }) => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetFlatList data={data} keyExtractor={(i) => i} renderItem={renderItem} contentContainerStyle={styles.contentContainer} /> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: \"white\", }, itemContainer: { padding: 6, margin: 6, backgroundColor: \"#eee\", },}); export default App; Copy "},{"title":"BottomSheetFooter","type":0,"sectionRef":"#","url":"components/bottomsheetfooter","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetFooter","url":"components/bottomsheetfooter#props","content":""},{"title":"animatedFooterPosition","type":1,"pageTitle":"BottomSheetFooter","url":"components/bottomsheetfooter#animatedfooterposition","content":"Calculated footer animated position. type\tdefault\trequiredAnimated.SharedValue<number>\t0\tNO "},{"title":"bottomInset","type":1,"pageTitle":"BottomSheetFooter","url":"components/bottomsheetfooter#bottominset","content":"Bottom inset to be added below the footer. type\tdefault\trequirednumber\t0\tNO "},{"title":"children","type":1,"pageTitle":"BottomSheetFooter","url":"components/bottomsheetfooter#children","content":"Component to be placed in the footer. type\tdefault\trequiredReactNode | ReactNode[]\tundefined\tNO "},{"title":"Example","type":1,"pageTitle":"BottomSheetFooter","url":"components/bottomsheetfooter#example","content":"import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet } from 'react-native';import BottomSheet, { BottomSheetFooter } from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // renders const renderFooter = useCallback( props => ( <BottomSheetFooter {...props} bottomInset={24}> <View style={styles.footerContainer}> <Text style={styles.footerText}>Footer</Text> </View> </BottomSheetFooter> ), [] ); return ( <View style={styles.container}> <BottomSheet ref={bottomSheetRef} index={1} snapPoints={snapPoints} footerComponent={renderFooter} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', }, footerContainer: { padding: 12, margin: 12, borderRadius: 12, backgroundColor: '#80f', }, footerText: { textAlign: 'center', color: 'white', fontWeight: '800', },}); export default App; Copy "},{"title":"BottomSheetScrollView","type":0,"sectionRef":"#","url":"components/bottomsheetscrollview","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetScrollView","url":"components/bottomsheetscrollview#props","content":"Inherits ScrollViewProps from react-native. "},{"title":"focusHook","type":1,"pageTitle":"BottomSheetScrollView","url":"components/bottomsheetscrollview#focushook","content":"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO "},{"title":"Ignored Props","type":1,"pageTitle":"BottomSheetScrollView","url":"components/bottomsheetscrollview#ignored-props","content":"These props will be ignored if they were passed, because of the internal integration that uses them. scrollEventThrottledecelerationRateonScrollBeginDrag "},{"title":"Example","type":1,"pageTitle":"BottomSheetScrollView","url":"components/bottomsheetscrollview#example","content":"import React, { useCallback, useRef, useMemo } from \"react\";import { StyleSheet, View, Text, Button } from \"react-native\";import BottomSheet, { BottomSheetScrollView } from \"@gorhom/bottom-sheet\"; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []); // callbacks const handleSheetChange = useCallback((index) => { console.log(\"handleSheetChange\", index); }, []); const handleSnapPress = useCallback((index) => { sheetRef.current?.snapToIndex(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderItem = useCallback( (item) => ( <View key={item} style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetScrollView contentContainerStyle={styles.contentContainer}> {data.map(renderItem)} </BottomSheetScrollView> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: \"white\", }, itemContainer: { padding: 6, margin: 6, backgroundColor: \"#eee\", },}); export default App; Copy "},{"title":"Scrollables","type":0,"sectionRef":"#","url":"v2/scrollables","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"BottomSheetFlatList","type":1,"pageTitle":"Scrollables","url":"v2/scrollables#bottomsheetflatlist","content":"An extended component of FlatList from react-native, with bottom sheet integrations. Props# focusHook# This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO Example# import React, { useCallback, useRef, useMemo } from 'react';import { StyleSheet, View, Text, Button } from 'react-native';import BottomSheet, { BottomSheetFlatList } from '@gorhom/bottom-sheet'; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => ['25%', '50%', '90%'], []); // callbacks const handleSheetChange = useCallback(index => { console.log('handleSheetChange', index); }, []); const handleSnapPress = useCallback(index => { sheetRef.current?.snapTo(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderItem = useCallback( ({ item }) => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetFlatList data={data} keyExtractor={i => i} renderItem={renderItem} contentContainerStyle={styles.contentContainer} /> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: 'white', }, itemContainer: { padding: 6, margin: 6, backgroundColor: '#eee', },}); export default App; Copy "},{"title":"BottomSheetSectionList","type":1,"pageTitle":"Scrollables","url":"v2/scrollables#bottomsheetsectionlist","content":"Is an extended component of SectionList from react-native, with bottom sheet integrations. Props# focusHook# This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO Example# import React, { useCallback, useRef, useMemo } from 'react';import { StyleSheet, View, Text, Button } from 'react-native';import BottomSheet, { BottomSheetSectionList } from '@gorhom/bottom-sheet'; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const sections = useMemo( () => Array(10) .fill(0) .map((_, index) => ({ title: `Section ${index}`, data: Array(10) .fill(0) .map((_, index) => `Item ${index}`), })), [] ); const snapPoints = useMemo(() => ['25%', '50%', '90%'], []); // callbacks const handleSheetChange = useCallback(index => { console.log('handleSheetChange', index); }, []); const handleSnapPress = useCallback(index => { sheetRef.current?.snapTo(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderSectionHeader = useCallback( ({ section }) => ( <View style={styles.sectionHeaderContainer}> <Text>{section.title}</Text> </View> ), [] ); const renderItem = useCallback( ({ item }) => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetSectionList sections={sections} keyExtractor={i => i} renderSectionHeader={renderSectionHeader} renderItem={renderItem} contentContainerStyle={styles.contentContainer} /> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: 'white', }, sectionHeaderContainer: { backgroundColor: 'white', padding: 6, }, itemContainer: { padding: 6, margin: 6, backgroundColor: '#eee', },}); export default App; Copy "},{"title":"BottomSheetScrollView","type":1,"pageTitle":"Scrollables","url":"v2/scrollables#bottomsheetscrollview","content":"Is an extended component of ScrollView from react-native, with bottom sheet integrations. Props# focusHook# This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO Example# import React, { useCallback, useRef, useMemo } from 'react';import { StyleSheet, View, Text, Button } from 'react-native';import BottomSheet, { BottomSheetScrollView } from '@gorhom/bottom-sheet'; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => ['25%', '50%', '90%'], []); // callbacks const handleSheetChange = useCallback(index => { console.log('handleSheetChange', index); }, []); const handleSnapPress = useCallback(index => { sheetRef.current?.snapTo(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderItem = useCallback( item => ( <View key={item} style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetScrollView contentContainerStyle={styles.contentContainer} > {data.map(renderItem)} </BottomSheetScrollView> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: 'white', }, itemContainer: { padding: 6, margin: 6, backgroundColor: '#eee', },}); export default App; Copy "},{"title":"BottomSheetView","type":1,"pageTitle":"Scrollables","url":"v2/scrollables#bottomsheetview","content":"Is an extended component of View from react-native, with bottom sheet integrations. This only needed when the bottom sheet used with React Navigation. Props# focusHook# This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO Example# import React, { useCallback, useRef, useMemo } from 'react';import { StyleSheet, View, Text, Button } from 'react-native';import BottomSheet, { BottomSheetView } from '@gorhom/bottom-sheet'; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => ['25%', '50%', '90%'], []); // callbacks const handleSheetChange = useCallback(index => { console.log('handleSheetChange', index); }, []); const handleSnapPress = useCallback(index => { sheetRef.current?.snapTo(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderItem = useCallback( item => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetView style={styles.contentContainer}> {data.map(renderItem)} </BottomSheetView> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: 'white', }, itemContainer: { padding: 6, margin: 6, backgroundColor: '#eee', },}); export default App; Copy "},{"title":"BottomSheetSectionList","type":0,"sectionRef":"#","url":"components/bottomsheetsectionlist","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetSectionList","url":"components/bottomsheetsectionlist#props","content":"Inherits SectionListProps from react-native. "},{"title":"focusHook","type":1,"pageTitle":"BottomSheetSectionList","url":"components/bottomsheetsectionlist#focushook","content":"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO "},{"title":"Ignored Props","type":1,"pageTitle":"BottomSheetSectionList","url":"components/bottomsheetsectionlist#ignored-props","content":"These props will be ignored if they were passed, because of the internal integration that uses them. scrollEventThrottledecelerationRateonScrollBeginDrag "},{"title":"Example","type":1,"pageTitle":"BottomSheetSectionList","url":"components/bottomsheetsectionlist#example","content":"import React, { useCallback, useRef, useMemo } from \"react\";import { StyleSheet, View, Text, Button } from \"react-native\";import BottomSheet, { BottomSheetSectionList } from \"@gorhom/bottom-sheet\"; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const sections = useMemo( () => Array(10) .fill(0) .map((_, index) => ({ title: `Section ${index}`, data: Array(10) .fill(0) .map((_, index) => `Item ${index}`), })), [] ); const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []); // callbacks const handleSheetChange = useCallback((index) => { console.log(\"handleSheetChange\", index); }, []); const handleSnapPress = useCallback((index) => { sheetRef.current?.snapToIndex(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderSectionHeader = useCallback( ({ section }) => ( <View style={styles.sectionHeaderContainer}> <Text>{section.title}</Text> </View> ), [] ); const renderItem = useCallback( ({ item }) => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetSectionList sections={sections} keyExtractor={(i) => i} renderSectionHeader={renderSectionHeader} renderItem={renderItem} contentContainerStyle={styles.contentContainer} /> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: \"white\", }, sectionHeaderContainer: { backgroundColor: \"white\", padding: 6, }, itemContainer: { padding: 6, margin: 6, backgroundColor: \"#eee\", },}); export default App; Copy "},{"title":"BottomSheetTextInput","type":0,"sectionRef":"#","url":"components/bottomsheettextinput","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetTextInput","url":"components/bottomsheettextinput#props","content":"Inherits TextInputProps from react-native. "},{"title":"Example","type":1,"pageTitle":"BottomSheetTextInput","url":"components/bottomsheettextinput#example","content":"import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet } from 'react-native';import BottomSheet from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // callbacks const handleSheetChanges = useCallback((index: number) => { console.log('handleSheetChanges', index); }, []); // renders return ( <View style={styles.container}> <BottomSheet ref={bottomSheetRef} index={1} snapPoints={snapPoints} keyboardBehavior=\"fillParent\" onChange={handleSheetChanges} > <BottomSheetTextInput style={styles.input} /> <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', }, input: { marginTop: 8, marginBottom: 10, borderRadius: 10, fontSize: 16, lineHeight: 20, padding: 8, backgroundColor: 'rgba(151, 151, 151, 0.25)', },}); export default App; Copy "},{"title":"BottomSheetView","type":0,"sectionRef":"#","url":"components/bottomsheetview","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetView","url":"components/bottomsheetview#props","content":"Inherits ViewProps from react-native. "},{"title":"focusHook","type":1,"pageTitle":"BottomSheetView","url":"components/bottomsheetview#focushook","content":"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO "},{"title":"Example","type":1,"pageTitle":"BottomSheetView","url":"components/bottomsheetview#example","content":"import React, { useCallback, useRef, useMemo } from \"react\";import { StyleSheet, View, Text, Button } from \"react-native\";import BottomSheet, { BottomSheetView } from \"@gorhom/bottom-sheet\"; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []); // callbacks const handleSheetChange = useCallback((index) => { console.log(\"handleSheetChange\", index); }, []); const handleSnapPress = useCallback((index) => { sheetRef.current?.snapToIndex(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetView> <Text>Awesome üî•</Text> </BottomSheetView> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, },}); export default App; Copy "},{"title":"Custom Backdrop","type":0,"sectionRef":"#","url":"custom-backdrop","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Backdrop","url":"custom-backdrop#example","content":" Here is an example of a custom backdrop component: import React, { useMemo } from \"react\";import { BottomSheetBackdropProps } from \"@gorhom/bottom-sheet\";import Animated, { Extrapolate, interpolate, useAnimatedStyle,} from \"react-native-reanimated\"; const CustomBackdrop = ({ animatedIndex, style }: BottomSheetBackdropProps) => { // animated variables const containerAnimatedStyle = useAnimatedStyle(() => ({ opacity: interpolate( animatedIndex.value, [0, 1], [0, 1], Extrapolate.CLAMP ), })); // styles const containerStyle = useMemo( () => [ style, { backgroundColor: \"#a8b5eb\", }, containerAnimatedStyle, ], [style, containerAnimatedStyle] ); return <Animated.View style={containerStyle} />;}; export default CustomBackdrop; Copy "},{"title":"BottomSheetVirtualizedList","type":0,"sectionRef":"#","url":"components/bottomsheetvirtualizedlist","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"BottomSheetVirtualizedList","url":"components/bottomsheetvirtualizedlist#props","content":"Inherits VirtualizedListProps from react-native. "},{"title":"focusHook","type":1,"pageTitle":"BottomSheetVirtualizedList","url":"components/bottomsheetvirtualizedlist#focushook","content":"This needed when bottom sheet used with multiple scrollables to allow bottom sheet detect the current scrollable ref, especially when used with React Navigation. You will need to provide useFocusEffect from @react-navigation/native. type\tdefault\trequiredfunction\tReact.useEffect\tNO "},{"title":"Ignored Props","type":1,"pageTitle":"BottomSheetVirtualizedList","url":"components/bottomsheetvirtualizedlist#ignored-props","content":"These props will be ignored if they were passed, because of the internal integration that uses them. scrollEventThrottledecelerationRateonScrollBeginDrag "},{"title":"Example","type":1,"pageTitle":"BottomSheetVirtualizedList","url":"components/bottomsheetvirtualizedlist#example","content":"import React, { useCallback, useRef, useMemo } from \"react\";import { StyleSheet, View, Text, Button } from \"react-native\";import BottomSheet, { BottomSheetVirtualizedList } from \"@gorhom/bottom-sheet\"; const App = () => { // hooks const sheetRef = useRef<BottomSheet>(null); // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => [\"25%\", \"50%\", \"90%\"], []); // callbacks const handleSheetChange = useCallback((index) => { console.log(\"handleSheetChange\", index); }, []); const handleSnapPress = useCallback((index) => { sheetRef.current?.snapToIndex(index); }, []); const handleClosePress = useCallback(() => { sheetRef.current?.close(); }, []); // render const renderItem = useCallback( ({ item }) => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <Button title=\"Snap To 90%\" onPress={() => handleSnapPress(2)} /> <Button title=\"Snap To 50%\" onPress={() => handleSnapPress(1)} /> <Button title=\"Snap To 25%\" onPress={() => handleSnapPress(0)} /> <Button title=\"Close\" onPress={() => handleClosePress()} /> <BottomSheet ref={sheetRef} snapPoints={snapPoints} onChange={handleSheetChange} > <BottomSheetVirtualizedList data={data} keyExtractor={(i) => i} getItemCount={(data) => data.length} getItem={(data, index) => data[index]} renderItem={renderItem} contentContainerStyle={styles.contentContainer} /> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, paddingTop: 200, }, contentContainer: { backgroundColor: \"white\", }, itemContainer: { padding: 6, margin: 6, backgroundColor: \"#eee\", },}); export default App; Copy "},{"title":"Custom Background","type":0,"sectionRef":"#","url":"custom-background","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Background","url":"custom-background#example","content":" Here is an example of a custom background component: import React, { useMemo } from \"react\";import { BottomSheetBackgroundProps } from \"@gorhom/bottom-sheet\";import Animated, { useAnimatedStyle, interpolateColor,} from \"react-native-reanimated\"; const CustomBackground: React.FC<BottomSheetBackgroundProps> = ({ style, animatedIndex,}) => { //#region styles const containerAnimatedStyle = useAnimatedStyle(() => ({ // @ts-ignore backgroundColor: interpolateColor( animatedIndex.value, [0, 1], [\"#ffffff\", \"#a8b5eb\"] ), })); const containerStyle = useMemo( () => [style, containerAnimatedStyle], [style, containerAnimatedStyle] ); //#endregion // render return <Animated.View pointerEvents=\"none\" style={containerStyle} />;}; export default CustomBackground; Copy "},{"title":"Custom Footer","type":0,"sectionRef":"#","url":"custom-footer","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Footer","url":"custom-footer#example","content":" Here is an example of a custom footer component but first you will need to install Redash: Redash: The React Native Reanimated and Gesture Handler Toolbelt. CustomFooter.tsx import React, { useCallback, useMemo } from 'react';import { StyleSheet } from 'react-native';import { BottomSheetFooter, BottomSheetFooterProps, useBottomSheet,} from '@gorhom/bottom-sheet';import { RectButton } from 'react-native-gesture-handler';import { useSafeAreaInsets } from 'react-native-safe-area-context';import Animated, { Extrapolate, interpolate, useAnimatedStyle,} from 'react-native-reanimated';import { toRad } from 'react-native-redash'; const AnimatedRectButton = Animated.createAnimatedComponent(RectButton); // inherent the `BottomSheetFooterProps` to be able receive// `animatedFooterPosition`.interface CustomFooterProps extends BottomSheetFooterProps {} const CustomFooter = ({ animatedFooterPosition }: CustomFooterProps) => { //#region hooks // we need the bottom safe insets to avoid bottom notches. const { bottom: bottomSafeArea } = useSafeAreaInsets(); // extract animated index and other functionalities const { expand, collapse, animatedIndex } = useBottomSheet(); //#endregion //#region styles // create the arrow animated style reacting to the // sheet index. const arrowAnimatedStyle = useAnimatedStyle(() => { const arrowRotate = interpolate( animatedIndex.value, [0, 1], [toRad(0), toRad(-180)], Extrapolate.CLAMP ); return { transform: [{ rotate: `${arrowRotate}rad` }], }; }, []); const arrowStyle = useMemo( () => [arrowAnimatedStyle, styles.arrow], [arrowAnimatedStyle] ); // create the content animated style reacting to the // sheet index. const containerAnimatedStyle = useAnimatedStyle( () => ({ opacity: interpolate( animatedIndex.value, [-0.85, 0], [0, 1], Extrapolate.CLAMP ), }), [animatedIndex] ); const containerStyle = useMemo( () => [containerAnimatedStyle, styles.container], [containerAnimatedStyle] ); //#endregion //#region callbacks const handleArrowPress = useCallback(() => { // if sheet is collapsed, then we extend it, // or the opposite. if (animatedIndex.value === 0) { expand(); } else { collapse(); } }, [expand, collapse, animatedIndex]); //#endregion return ( <BottomSheetFooter // we pass the bottom safe inset bottomInset={bottomSafeArea} // we pass the provided `animatedFooterPosition` animatedFooterPosition={animatedFooterPosition} > <AnimatedRectButton style={containerStyle} onPress={handleArrowPress}> <Animated.Text style={arrowStyle}>‚åÉ</Animated.Text> </AnimatedRectButton> </BottomSheetFooter> );}; // footer styleconst styles = StyleSheet.create({ container: { alignSelf: 'flex-end', justifyContent: 'center', alignItems: 'center', marginHorizontal: 24, marginBottom: 12, width: 50, height: 50, borderRadius: 25, backgroundColor: '#80f', shadowOffset: { width: 0, height: 12, }, shadowOpacity: 0.25, shadowRadius: 8.0, elevation: 8, }, arrow: { fontSize: 20, height: 20, textAlignVertical: 'center', fontWeight: '900', color: '#fff', },}); export default CustomFooter; Copy App.tsx import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet } from 'react-native';import BottomSheet from '@gorhom/bottom-sheet';import CustomFooter from './CustomFooter'; const App = () => { // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // renders return ( <View style={styles.container}> <BottomSheet index={1} snapPoints={snapPoints} footerComponent={CustomFooter} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', },}); export default App; Copy "},{"title":"Detach Modal","type":0,"sectionRef":"#","url":"detach-modal","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Detach Modal","url":"detach-modal#example","content":" Here is an example of a simple detach modal: import React, { useMemo, useRef } from \"react\";import { View, Text, StyleSheet } from \"react-native\";import BottomSheet from \"@gorhom/bottom-sheet\"; const App = () => { // ref const bottomSheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => [\"25%\"], []); // renders return ( <View style={styles.container}> <BottomSheet ref={bottomSheetRef} snapPoints={snapPoints} // add bottom inset to elevate the sheet bottomInset={46} // set `detached` to true detached={true} style={styles.sheetContainer} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: \"grey\", }, sheetContainer: { // add horizontal space marginHorizontal: 24, }, contentContainer: { flex: 1, alignItems: \"center\", },}); export default App; Copy "},{"title":"FAQ","type":0,"sectionRef":"#","url":"faq","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"How this library differ from reanimated-bottom-sheet or react-native-scroll-bottom-sheet?","type":1,"pageTitle":"FAQ","url":"faq#how-this-library-differ-from-reanimated-bottom-sheet-or-react-native-scroll-bottom-sheet","content":"This library was built to provide the most native-like experience and could fit any use-case that developers wants it to be. While both libraries providing similar experience, but they still missing the following: reanimated-bottom-sheet: Seamless gesture interaction between the sheet and the content.react-native-scroll-bottom-sheet: Extracting scrollable content to allow developers customize the sheet content, like integrate React Navigation as the sheet content. Both libraries are great! and I have used both of them at my work ‚ù§Ô∏è "},{"title":"Custom Handle","type":0,"sectionRef":"#","url":"custom-handle","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Custom Handle","url":"custom-handle#example","content":" Here is an example of a custom handle component, but first you will need to install Redash: Redash: The React Native Reanimated and Gesture Handler Toolbelt. yarn add react-native-redash Copy import React, { useMemo } from \"react\";import { StyleProp, StyleSheet, ViewStyle } from \"react-native\";import { BottomSheetHandleProps } from \"@gorhom/bottom-sheet\";import Animated, { Extrapolate, interpolate, useAnimatedStyle, useDerivedValue,} from \"react-native-reanimated\";import { toRad } from \"react-native-redash\"; // @ts-ignoreexport const transformOrigin = ({ x, y }, ...transformations) => { \"worklet\"; return [ { translateX: x }, { translateY: y }, ...transformations, { translateX: x * -1 }, { translateY: y * -1 }, ];}; interface HandleProps extends BottomSheetHandleProps { style?: StyleProp<ViewStyle>;} const Handle: React.FC<HandleProps> = ({ style, animatedIndex }) => { //#region animations const indicatorTransformOriginY = useDerivedValue(() => interpolate(animatedIndex.value, [0, 1, 2], [-1, 0, 1], Extrapolate.CLAMP) ); //#endregion //#region styles const containerStyle = useMemo(() => [styles.header, style], [style]); const containerAnimatedStyle = useAnimatedStyle(() => { const borderTopRadius = interpolate( animatedIndex.value, [1, 2], [20, 0], Extrapolate.CLAMP ); return { borderTopLeftRadius: borderTopRadius, borderTopRightRadius: borderTopRadius, }; }); const leftIndicatorStyle = useMemo( () => ({ ...styles.indicator, ...styles.leftIndicator, }), [] ); const leftIndicatorAnimatedStyle = useAnimatedStyle(() => { const leftIndicatorRotate = interpolate( animatedIndex.value, [0, 1, 2], [toRad(-30), 0, toRad(30)], Extrapolate.CLAMP ); return { transform: transformOrigin( { x: 0, y: indicatorTransformOriginY.value }, { rotate: `${leftIndicatorRotate}rad`, }, { translateX: -5, } ), }; }); const rightIndicatorStyle = useMemo( () => ({ ...styles.indicator, ...styles.rightIndicator, }), [] ); const rightIndicatorAnimatedStyle = useAnimatedStyle(() => { const rightIndicatorRotate = interpolate( animatedIndex.value, [0, 1, 2], [toRad(30), 0, toRad(-30)], Extrapolate.CLAMP ); return { transform: transformOrigin( { x: 0, y: indicatorTransformOriginY.value }, { rotate: `${rightIndicatorRotate}rad`, }, { translateX: 5, } ), }; }); //#endregion // render return ( <Animated.View style={[containerStyle, containerAnimatedStyle]} renderToHardwareTextureAndroid={true} > <Animated.View style={[leftIndicatorStyle, leftIndicatorAnimatedStyle]} /> <Animated.View style={[rightIndicatorStyle, rightIndicatorAnimatedStyle]} /> </Animated.View> );}; export default Handle; const styles = StyleSheet.create({ header: { alignContent: \"center\", alignItems: \"center\", justifyContent: \"center\", backgroundColor: \"white\", paddingVertical: 14, borderBottomWidth: 1, borderBottomColor: \"#fff\", }, indicator: { position: \"absolute\", width: 10, height: 4, backgroundColor: \"#999\", }, leftIndicator: { borderTopStartRadius: 2, borderBottomStartRadius: 2, }, rightIndicator: { borderTopEndRadius: 2, borderBottomEndRadius: 2, },}); Copy "},{"title":"Keyboard Handling","type":0,"sectionRef":"#","url":"keyboard-handling","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Keyboard Handling","url":"keyboard-handling#example","content":" Here is an example of a simple keyboard handling: import React, { useMemo } from \"react\";import { View, StyleSheet } from \"react-native\";import BottomSheet, { BottomSheetTextInput } from \"@gorhom/bottom-sheet\"; const App = () => { // variables const snapPoints = useMemo(() => [\"25%\"], []); // renders return ( <View style={styles.container}> <BottomSheet snapPoints={snapPoints}> <View style={styles.contentContainer}> <BottomSheetTextInput value=\"Awesome üéâ\" style={styles.textInput} /> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: \"grey\", }, textInput: { alignSelf: \"stretch\", marginHorizontal: 12, marginBottom: 12, padding: 12, borderRadius: 12, backgroundColor: \"grey\", color: \"white\", textAlign: \"center\", }, contentContainer: { flex: 1, alignItems: \"center\", },}); export default App; Copy "},{"title":"Hooks","type":0,"sectionRef":"#","url":"hooks","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"useBottomSheet","type":1,"pageTitle":"Hooks","url":"hooks#usebottomsheet","content":"This hook provides all the bottom sheet public methods and animatedIndex & animatedPosition, to the internal sheet content or handle. info This hook works at any component inside the BottomSheet. import React from 'react';import { View, Button } from 'react-native';import { useBottomSheet } from '@gorhom/bottom-sheet'; const SheetContent = () => { const { expand } = useBottomSheet(); return ( <View> <Button onPress={expand}> </View> )} Copy "},{"title":"useBottomSheetDynamicSnapPoints","type":1,"pageTitle":"Hooks","url":"hooks#usebottomsheetdynamicsnappoints","content":"A hook to simplify handling dynamic snap points, it will take an initial snap points with a placeholder for content height CONTENT_HEIGHT that will be replaced once the content is measured and will return: animatedSnapPoints: to provided to BottomSheet or BottomSheetModal.animatedHandleHeight: an animated handle height callback node.animatedContentHeight: an animated content height.handleContentLayout: onLayout callback to be set on BottomSheetView component. import React from 'react';import BottomSheet, { useBottomSheetDynamicSnapPoints,} from '@gorhom/bottom-sheet'; const App = () => { const initialSnapPoints = useMemo(() => ['25%', 'CONTENT_HEIGHT'], []); const { animatedHandleHeight, animatedSnapPoints, animatedContentHeight, handleContentLayout, } = useBottomSheetDynamicSnapPoints(initialSnapPoints); return ( //... other views <BottomSheet ref={bottomSheetRef} snapPoints={animatedSnapPoints} handleHeight={animatedHandleHeight} contentHeight={animatedContentHeight} > <BottomSheetView style={contentContainerStyle} onLayout={handleContentLayout} > //... views to be measured </BottomSheetView> </BottomSheet> //... other views );}; Copy "},{"title":"useBottomSheetSpringConfigs","type":1,"pageTitle":"Hooks","url":"hooks#usebottomsheetspringconfigs","content":"Generate animation spring configs. import React from 'react';import BottomSheet, { useBottomSheetSpringConfigs } from '@gorhom/bottom-sheet'; const SheetContent = () => { const animationConfigs = useBottomSheetSpringConfigs({ damping: 80, overshootClamping: true, restDisplacementThreshold: 0.1, restSpeedThreshold: 0.1, stiffness: 500, }); return ( <BottomSheet // ... other props animationConfigs={animationConfigs} > {CONTENT HERE} </BottomSheet> )} Copy "},{"title":"useBottomSheetTimingConfigs","type":1,"pageTitle":"Hooks","url":"hooks#usebottomsheettimingconfigs","content":"Generate animation timing configs. import React from 'react';import BottomSheet, { useBottomSheetTimingConfigs } from '@gorhom/bottom-sheet';import { Easing } from 'react-native-reanimated'; const SheetContent = () => { const animationConfigs = useBottomSheetTimingConfigs({ duration: 250, easing: Easing.exp, }); return ( <BottomSheet // ... other props animationConfigs={animationConfigs} > {CONTENT HERE} </BottomSheet> )} Copy "},{"title":"React Native Bottom Sheet Modal","type":0,"sectionRef":"#","url":"modal","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Features","type":1,"pageTitle":"React Native Bottom Sheet Modal","url":"modal#features","content":"...Bottom Sheet FeaturesSmooth interaction and mounting animation.Support stack sheet modals. "},{"title":"Installation","type":1,"pageTitle":"React Native Bottom Sheet Modal","url":"modal#installation","content":"This feature is already shipped with @gorhom/bottom-sheet package and it requires no extra dependency. "},{"title":"Methods","type":0,"sectionRef":"#","url":"methods","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"snapToIndex","type":1,"pageTitle":"Methods","url":"methods#snaptoindex","content":"Snap to one of the provided points from snapPoints. type snapToIndex = ( // snap point index. index: number, // snap animation configs animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig) => void; Copy "},{"title":"snapToPosition","type":1,"pageTitle":"Methods","url":"methods#snaptoposition","content":"Snap to a position out of provided snapPoints. type snapToPosition = ( // position in pixel or percentage. position: number, // snap animation configs animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig) => void; Copy "},{"title":"expand","type":1,"pageTitle":"Methods","url":"methods#expand","content":"Snap to the maximum provided point from snapPoints. type expand = ( // snap animation configs animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig) => void; Copy "},{"title":"collapse","type":1,"pageTitle":"Methods","url":"methods#collapse","content":"Snap to the minimum provided point from snapPoints. type collapse = ( // snap animation configs animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig) => void; Copy "},{"title":"close","type":1,"pageTitle":"Methods","url":"methods#close","content":"Close the bottom sheet. type close = ( // snap animation configs animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig) => void; Copy "},{"title":"forceClose","type":1,"pageTitle":"Methods","url":"methods#forceclose","content":"Force close the bottom sheet, this prevent any interruptions till the sheet is closed. type forceClose = ( // snap animation configs animationConfigs?: Animated.WithSpringConfig | Animated.WithTimingConfig) => void; Copy "},{"title":"Hooks","type":0,"sectionRef":"#","url":"modal/hooks","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"useBottomSheetModal","type":1,"pageTitle":"Hooks","url":"modal/hooks#usebottomsheetmodal","content":"This hook provides modal functionalities only, for sheet functionalities please look at Bottom Sheet Hooks. This hook works at any component in BottomSheetModalProvider. import React from 'react';import { View, Button } from 'react-native';import { useBottomSheetModal } from '@gorhom/bottom-sheet'; const SheetContent = () => { const { dismiss, dismissAll } = useBottomSheetModal(); return ( <View> <Button onPress={dismiss}> </View> )} Copy "},{"title":"dismiss","type":1,"pageTitle":"Hooks","url":"modal/hooks#dismiss","content":"type dismiss = (key: string) => void; Copy Dismiss a modal by its name/key. "},{"title":"dismissAll","type":1,"pageTitle":"Hooks","url":"modal/hooks#dismissall","content":"type dismissAll = () => void; Copy Dismiss all mounted/presented modals. "},{"title":"Methods","type":0,"sectionRef":"#","url":"modal/methods","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"present","type":1,"pageTitle":"Methods","url":"modal/methods#present","content":"type present = () => void; Copy Mount and present the modal. "},{"title":"dismiss","type":1,"pageTitle":"Methods","url":"modal/methods#dismiss","content":"type dismiss = () => void; Copy Close and unmount the modal. "},{"title":"Props","type":0,"sectionRef":"#","url":"modal/props","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Configuration","type":1,"pageTitle":"Props","url":"modal/props#configuration","content":""},{"title":"name","type":1,"pageTitle":"Props","url":"modal/props#name","content":"Modal name to help identify the modal for later on. type\tdefault\trequiredstring\tgenerated unique key\tNO "},{"title":"stackBehavior","type":1,"pageTitle":"Props","url":"modal/props#stackbehavior","content":"Available only on v3, for now. Defines the stack behavior when modal mounts. push it will mount the modal on top of current modal.replace it will minimize the current modal then mount the modal. type\tdefault\trequired'push' | 'replace'\t'replace'\tNO "},{"title":"enableDismissOnClose","type":1,"pageTitle":"Props","url":"modal/props#enabledismissonclose","content":"Dismiss the modal when it is closed type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"Callbacks","type":1,"pageTitle":"Props","url":"modal/props#callbacks","content":""},{"title":"onDismiss","type":1,"pageTitle":"Props","url":"modal/props#ondismiss","content":"Callback when the modal dismissed. type onDismiss = () => void; Copy type\tdefault\trequiredfunction\tnull\tNO "},{"title":"Usage","type":0,"sectionRef":"#","url":"modal/usage","content":"Usage Here is a simple usage of the Bottom Sheet Modal, with non-scrollable content. For more scrollable usage please read Scrollables. import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet, Button } from 'react-native';import { BottomSheetModal, BottomSheetModalProvider,} from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetModalRef = useRef<BottomSheetModal>(null); // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // callbacks const handlePresentModalPress = useCallback(() => { bottomSheetModalRef.current?.present(); }, []); const handleSheetChanges = useCallback((index: number) => { console.log('handleSheetChanges', index); }, []); // renders return ( <BottomSheetModalProvider> <View style={styles.container}> <Button onPress={handlePresentModalPress} title=\"Present Modal\" color=\"black\" /> <BottomSheetModal ref={bottomSheetModalRef} index={1} snapPoints={snapPoints} onChange={handleSheetChanges} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheetModal> </View> </BottomSheetModalProvider> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, justifyContent: 'center', backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', },}); export default App; Copy","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Props","type":0,"sectionRef":"#","url":"props","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Configuration","type":1,"pageTitle":"Props","url":"props#configuration","content":""},{"title":"index","type":1,"pageTitle":"Props","url":"props#index","content":"Initial snap index. You also could provide -1 to initiate bottom sheet in closed state. type\tdefault\trequirednumber\t0\tNO "},{"title":"snapPoints","type":1,"pageTitle":"Props","url":"props#snappoints","content":"Points for the bottom sheet to snap to, points should be sorted from bottom to top. It accepts array of number, string or mix. type\trequiredArray<number|string>\tYES caution String values should be a percentage. examples# snapPoints={[200, 500]}snapPoints={[200, '50%']}snapPoints={[-1, '100%']} Copy "},{"title":"overDragResistanceFactor","type":1,"pageTitle":"Props","url":"props#overdragresistancefactor","content":"Defines how violently sheet has to stopped while over dragging. type\tdefault\trequirednumber\t2.5\tNO "},{"title":"detached","type":1,"pageTitle":"Props","url":"props#detached","content":"Defines whether the bottom sheet is attached to the bottom or no. type\tdefault\trequiredboolean\tfalse\tNO "},{"title":"enableContentPanningGesture","type":1,"pageTitle":"Props","url":"props#enablecontentpanninggesture","content":"Enable content panning gesture interaction. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"enableHandlePanningGesture","type":1,"pageTitle":"Props","url":"props#enablehandlepanninggesture","content":"Enable handle panning gesture interaction. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"enableOverDrag","type":1,"pageTitle":"Props","url":"props#enableoverdrag","content":"Enable over drag for the sheet. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"enablePanDownToClose","type":1,"pageTitle":"Props","url":"props#enablepandowntoclose","content":"Enable pan down gesture to close the sheet. type\tdefault\trequiredboolean\tfalse\tNO "},{"title":"animateOnMount","type":1,"pageTitle":"Props","url":"props#animateonmount","content":"This will initially mount the sheet closed and when it's mounted and calculated the layout, it will snap to initial snap point index. type\tdefault\trequiredboolean\ttrue\tNO "},{"title":"Styles","type":1,"pageTitle":"Props","url":"props#styles","content":""},{"title":"style","type":1,"pageTitle":"Props","url":"props#style","content":"View style to be applied at the sheet container, it also could be an AnimatedStyle. This is helpful to add shadow to the sheet. type\tdefault\trequiredViewStyle | AnimatedStyle\tundefined\tNO "},{"title":"backgroundStyle","type":1,"pageTitle":"Props","url":"props#backgroundstyle","content":"View style to be applied to the background component. type\tdefault\trequiredViewStyle\tundefined\tNO "},{"title":"handleStyle","type":1,"pageTitle":"Props","url":"props#handlestyle","content":"View style to be applied to the handle component. type\tdefault\trequiredViewStyle\tundefined\tNO "},{"title":"handleIndicatorStyle","type":1,"pageTitle":"Props","url":"props#handleindicatorstyle","content":"View style to be applied to the handle indicator component. type\tdefault\trequiredViewStyle\tundefined\tNO "},{"title":"Layout Configuration","type":1,"pageTitle":"Props","url":"props#layout-configuration","content":""},{"title":"handleHeight","type":1,"pageTitle":"Props","url":"props#handleheight","content":"Handle height helps to calculate the internal container and sheet layouts. If handleComponent is provided, the library internally will calculate its layout, unless handleHeight is provided too. type\tdefault\trequirednumber\t24\tNO "},{"title":"containerHeight","type":1,"pageTitle":"Props","url":"props#containerheight","content":"Container height helps to calculate the internal sheet layouts. If containerHeight not provided, the library internally will calculate it, however this will cause an extra re-rendering. type\tdefault\trequirednumber\t0\tNO "},{"title":"contentHeight","type":1,"pageTitle":"Props","url":"props#contentheight","content":"Content height helps dynamic snap points calculation. type\tdefault\trequirednumber | Animated.SharedValue<number>\tundefined\tNO "},{"title":"containerOffset","type":1,"pageTitle":"Props","url":"props#containeroffset","content":"Container offset helps to accurately detect container offsets. type\tdefault\trequiredAnimated.SharedValue<Insets>\tundefined\tNO "},{"title":"topInset","type":1,"pageTitle":"Props","url":"props#topinset","content":"Top inset to be added to the bottom sheet container, usually it comes from @react-navigation/stack hook useHeaderHeight or from react-native-safe-area-context hook useSafeArea. type\tdefault\trequirednumber\t0\tNO "},{"title":"bottomInset","type":1,"pageTitle":"Props","url":"props#bottominset","content":"Bottom inset to be added to the bottom sheet container. type\tdefault\trequirednumber\t0\tNO "},{"title":"Keyboard Configuration","type":1,"pageTitle":"Props","url":"props#keyboard-configuration","content":""},{"title":"keyboardBehavior","type":1,"pageTitle":"Props","url":"props#keyboardbehavior","content":"Defines the keyboard appearance behavior. extend: extend the sheet to its maximum snap point.fullScreen: extend the sheet to full screen.interactive: offset the sheet by the size of the keyboard. type\tdefault\trequired'extend' | 'fullScreen' | 'interactive'\t'interactive'\tNO "},{"title":"keyboardBlurBehavior","type":1,"pageTitle":"Props","url":"props#keyboardblurbehavior","content":"Defines the keyboard blur behavior. none: do nothing.restore: restore sheet position. type\tdefault\trequired'none' | 'restore'\t'none'\tNO "},{"title":"android_keyboardInputMode","type":1,"pageTitle":"Props","url":"props#android_keyboardinputmode","content":"Defines keyboard input mode for Android only, learn more. type\tdefault\trequired'adjustPan' | 'adjustResize'\t'adjustPan'\tNO "},{"title":"Animation Configuration","type":1,"pageTitle":"Props","url":"props#animation-configuration","content":""},{"title":"animationConfigs","type":1,"pageTitle":"Props","url":"props#animationconfigs","content":"Animation configs, this could be created by: useBottomSheetSpringConfigsuseBottomSheetTimingConfigs type animationConfigs = ( point: number, velocity: number, callback: () => void) => number; Copy type\tdefault\trequiredfunction\tundefined\tNO "},{"title":"Gesture Configuration","type":1,"pageTitle":"Props","url":"props#gesture-configuration","content":""},{"title":"waitFor","type":1,"pageTitle":"Props","url":"props#waitfor","content":"Read about waitFor. type\tdefault\trequiredReact.Ref | React.Ref[]\t[]\tNO "},{"title":"simultaneousHandlers","type":1,"pageTitle":"Props","url":"props#simultaneoushandlers","content":"Read about simultaneousHandlers. type\tdefault\trequiredReact.Ref | React.Ref[]\t[]\tNO "},{"title":"activeOffsetX","type":1,"pageTitle":"Props","url":"props#activeoffsetx","content":"Read about activeOffsetX. type\tdefault\trequirednumber[]\tundefined\tNO "},{"title":"activeOffsetY","type":1,"pageTitle":"Props","url":"props#activeoffsety","content":"Read about activeOffsetY. type\tdefault\trequirednumber[]\tundefined\tNO "},{"title":"failOffsetX","type":1,"pageTitle":"Props","url":"props#failoffsetx","content":"Read about failOffsetX. type\tdefault\trequirednumber[]\tundefined\tNO "},{"title":"failOffsetY","type":1,"pageTitle":"Props","url":"props#failoffsety","content":"Read about failOffsetY. type\tdefault\trequirednumber[]\tundefined\tNO "},{"title":"gestureEventsHandlersHook","type":1,"pageTitle":"Props","url":"props#gestureeventshandlershook","content":"Custom hook to provide pan gesture events handler, which will allow advance and customize handling for pan gesture. type\tdefault\trequiredGestureEventsHandlersHookType\tuseGestureEventsHandlersDefault\tNO warning: this is an experimental feature and the hook signature can change without a major version bump. "},{"title":"Animated Nodes","type":1,"pageTitle":"Props","url":"props#animated-nodes","content":""},{"title":"animatedIndex","type":1,"pageTitle":"Props","url":"props#animatedindex","content":"Animated value to be used as a callback for the index node internally. type\tdefault\trequiredAnimated.SharedValue<number>\tnull\tNO "},{"title":"animatedPosition","type":1,"pageTitle":"Props","url":"props#animatedposition","content":"Animated value to be used as a callback for the position node internally. type\tdefault\trequiredAnimated.SharedValue<number>\tnull\tNO "},{"title":"Callbacks","type":1,"pageTitle":"Props","url":"props#callbacks","content":""},{"title":"onChange","type":1,"pageTitle":"Props","url":"props#onchange","content":"Callback when the sheet position changed. type onChange = (index: number) => void; Copy type\tdefault\trequiredfunction\tnull\tNO "},{"title":"onAnimate","type":1,"pageTitle":"Props","url":"props#onanimate","content":"Callback when the sheet about to animate to a new position. type onAnimate = (fromIndex: number, toIndex: number) => void; Copy type\tdefault\trequiredfunction\tnull\tNO "},{"title":"Components","type":1,"pageTitle":"Props","url":"props#components","content":""},{"title":"handleComponent","type":1,"pageTitle":"Props","url":"props#handlecomponent","content":"Component to be placed as a sheet handle. type\tdefault\trequiredReact.FC<BottomSheetHandleProps>\tBottomSheetHandle\tNO "},{"title":"backdropComponent","type":1,"pageTitle":"Props","url":"props#backdropcomponent","content":"Component to be placed as a sheet backdrop, by default is set to null, however the library also provide a default implementation BottomSheetBackdrop of a backdrop but you will need to provide it manually. type\tdefault\trequiredReact.FC<BottomSheetBackgroundProps>\tnull\tNO "},{"title":"backgroundComponent","type":1,"pageTitle":"Props","url":"props#backgroundcomponent","content":"Component to be placed as a sheet background. type\tdefault\trequiredReact.FC<BottomSheetBackgroundProps>\tBottomSheetBackground\tNO "},{"title":"footerComponent","type":1,"pageTitle":"Props","url":"props#footercomponent","content":"Component to be placed as a sheet footer. type\tdefault\trequiredReact.FC<BottomSheetFooterProps>\tundefined\tNO "},{"title":"children","type":1,"pageTitle":"Props","url":"props#children","content":"Scrollable node or react node to be places as a sheet content. type\tdefault\trequired() => React.ReactNode | React.ReactNode[] | React.ReactNode\tnull\tYES "},{"title":"React Navigation Integration","type":0,"sectionRef":"#","url":"react-navigation-integration","content":"React Navigation Integration One of the main goal of this library, is to allow user to fully integrate a stack navigator in the bottom sheet. This integration allow lots of opportunities for a native-like experience in your app üòá However, there are some tricks has to be follow to enable both libraries to work together seamlessly. You need to override safeAreaInsets, by default React Navigation add the safe area insets to all its navigators, but since your navigator will properly won't cover full screen, you will need to override it and set it to 0. For more details regarding the implementation, please have a look at the Navigator Example.","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Pull To Refresh","type":0,"sectionRef":"#","url":"pull-to-refresh","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Example","type":1,"pageTitle":"Pull To Refresh","url":"pull-to-refresh#example","content":" Here is an example of a simple pull to refresh: import React, { useCallback, useMemo } from \"react\";import { StyleSheet, View, Text } from \"react-native\";import BottomSheet, { BottomSheetFlatList } from \"@gorhom/bottom-sheet\"; const App = () => { // variables const data = useMemo( () => Array(50) .fill(0) .map((_, index) => `index-${index}`), [] ); const snapPoints = useMemo(() => [\"25%\", \"50%\"], []); // callbacks const handleRefresh = useCallback(() => { console.log(\"handleRefresh\"); }, []); // render const renderItem = useCallback( ({ item }) => ( <View style={styles.itemContainer}> <Text>{item}</Text> </View> ), [] ); return ( <View style={styles.container}> <BottomSheet snapPoints={snapPoints}> <BottomSheetFlatList data={data} keyExtractor={(i) => i} renderItem={renderItem} contentContainerStyle={styles.contentContainer} refreshing={false} onRefresh={handleRefresh} /> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, }, contentContainer: { backgroundColor: \"white\", }, itemContainer: { padding: 6, margin: 6, backgroundColor: \"#eee\", },}); export default App; Copy "},{"title":"Scrollables","type":0,"sectionRef":"#","url":"scrollables","content":"Scrollables This library provides a pre-integrated virtualized lists that utilize an internal functionalities with the bottom sheet container to allow smooth panning interactions. These lists I called them Scrollables and they are: BottomSheetFlatListBottomSheetSectionListBottomSheetScrollViewBottomSheetVirtualizedListBottomSheetView","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"troubleshooting","content":"","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"},{"title":"Pressables / Touchables are not working on Android","type":1,"pageTitle":"Troubleshooting","url":"troubleshooting#pressables--touchables-are-not-working-on-android","content":"Due to wrapping the content and handle with TapGestureHandler & PanGestureHandler, any gesture interaction would not function as expected. To resolve this issue, please use touchables that this library provide. import { TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback,} from '@gorhom/bottom-sheet'; Copy "},{"title":"Adding horizontal FlatList or ScrollView is not working properly on Android","type":1,"pageTitle":"Troubleshooting","url":"troubleshooting#adding-horizontal-flatlist-or-scrollview-is-not-working-properly-on-android","content":"Due to wrapping the content and handle with TapGestureHandler & PanGestureHandler, any gesture interaction would not function as expected. To resolve this issue, please use ScrollView & FlatList from react-native-gesture-handler provide instead react-native. import { ScrollView, FlatList} from 'react-native-gesture-handler'; Copy "},{"title":"My component gesture interaction gets conflicted with Bottom Sheet interactions ?","type":1,"pageTitle":"Troubleshooting","url":"troubleshooting#my-component-gesture-interaction-gets-conflicted-with-bottom-sheet-interactions-","content":"To avoid the gesture interaction conflict between the Bottom Sheet and its content, you will need to wrap your component with NativeViewGestureHandler from react-native-gesture-handler import { NativeViewGestureHandler } from 'react-native-gesture-handler'; <NativeViewGestureHandler disallowInterruption={true}> <AwesomeComponent /></NativeViewGestureHandler> Copy "},{"title":"Usage","type":0,"sectionRef":"#","url":"usage","content":"Usage Here is a simple usage of the Bottom Sheet, with non-scrollable content. For more scrollable usage please read Scrollables. import React, { useCallback, useMemo, useRef } from 'react';import { View, Text, StyleSheet } from 'react-native';import BottomSheet from '@gorhom/bottom-sheet'; const App = () => { // ref const bottomSheetRef = useRef<BottomSheet>(null); // variables const snapPoints = useMemo(() => ['25%', '50%'], []); // callbacks const handleSheetChanges = useCallback((index: number) => { console.log('handleSheetChanges', index); }, []); // renders return ( <View style={styles.container}> <BottomSheet ref={bottomSheetRef} index={1} snapPoints={snapPoints} onChange={handleSheetChanges} > <View style={styles.contentContainer}> <Text>Awesome üéâ</Text> </View> </BottomSheet> </View> );}; const styles = StyleSheet.create({ container: { flex: 1, padding: 24, backgroundColor: 'grey', }, contentContainer: { flex: 1, alignItems: 'center', },}); export default App; Copy","keywords":"bottomsheet bottom-sheet bottom sheet react-native react native ios android sheet modal presentation modal reanimated"}]